apiVersion: extensions/v1beta1
kind: Deployment
metadata:
    name: {{ .Values.nodeName }}db
    {{- if .Values.deployment.annotations }}
    annotations:
{{ toYaml .Values.deployment.annotations | indent 8 }}
    {{- end }}
    namespace: {{ .Values.metadata.namespace }}
    labels:
      app.kubernetes.io/name: {{ .Values.nodeName }}db
      helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }} 
spec:
    replicas: {{ .Values.replicas }}
    strategy:
      type: Recreate
      rollingUpdate: null
    template:
      metadata:
        labels:
          app: {{ .Values.nodeName }}db
          app.kubernetes.io/name: {{ .Values.nodeName }}db
          app.kubernetes.io/instance: {{ .Release.Name }}
      spec:
        hostname: {{ .Values.nodeName }}
        securityContext:
          fsGroup: 1000
        containers:
        - name: {{ .Values.nodeName }}db
          image: {{ .Values.image.containerName }}
          resources:
            limits:
              memory: {{ .Values.resources.limits }}
            requests:
              memory: {{ .Values.resources.requests }}
          ports:
            - containerPort: {{ .Values.service.tcp.targetPort}}
              name: p2p
            - containerPort: {{ .Values.service.web.targetPort }}
              name: web
          env:
            - name: JAVA_OPTIONS
              value: {{ .Values.image.env.JAVA_OPTIONS }}
          volumeMounts:
          - name: db
            mountPath: {{ .Values.storage.mountPath }}
            readOnly: false
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.tcp.targetPort}}
            initialDelaySeconds: 15
            periodSeconds: 20
        imagePullSecrets:
          - name: {{ .Values.image.imagePullSecret }}
        volumes:
          - name: db
            persistentVolumeClaim:
              claimName: {{ .Values.nodeName }}db-pvc
